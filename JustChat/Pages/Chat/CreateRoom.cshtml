@page
@model JustChat.Pages.Chat.CreateRoomModel
@{
}

<form onsubmit="onSubmit(event)">
    <div class="row">
        <div class="col s3"></div>
        <div class="input-field col s6">
            <input id="roomName" type="text" name="roomName" />
            <label for="roomName">Room Name</label>
        </div>
        <div class="col s3"></div>
    </div>
    <div class="row">
        <div class="col s3"></div>
        <div class="input-field col s6">
            <i class="material-icons prefix">face</i>
            <input type="text" id="autocomplete-input" class="autocomplete">
            <label for="autocomplete-input">Find users</label>
        </div>
        <div class="col s3"></div>
    </div>
    <div class="center-align">
        <button type="submit" class="waves-effect waves-light btn light-green accent-4"><i class="material-icons right">send</i>Create Room</button>
    </div>
</form>



<div class="col s12 invited-users center-align">
    <h6>Invited users</h6>
</div>

@section Scripts {
    <script>
        let invitedUsersList = [];
            invitedUsersList.push('@Model.CurrentUserName');

            let newRoomVM = {
                roomName: "",
                invitedUsersNames: invitedUsersList
            };

            let options = {
                data: {
                },
                onAutocomplete: function (invitedUser) {
                    delete options.data[invitedUser];
                    invitedUsersList.push(invitedUser);
                    let invitedUserDiv = document.createElement("div");
                    invitedUserDiv.innerHTML = `<i class="material-icons prefix">face</i>${invitedUser}`;
                    invitedUserDiv.className = `invited-user ${invitedUser}`;
                    let deleteIcon = document.createElement("i");
                    deleteIcon.className = "material-icons prefix delete";
                    deleteIcon.innerHTML = "delete";
                    invitedUserDiv.appendChild(deleteIcon);
                    document.querySelector(".invited-users").appendChild(invitedUserDiv);

                    deleteIcon.onclick = function () {
                        document.querySelector(`.${invitedUser}`).remove();
                        options.data[invitedUser] = null;
                    }
                }
            };

            @*console.log(@Html.Raw(@Json.Serialize(Model.AllUserNames)));*@

            for (let item of @Html.Raw(@Json.Serialize(Model.AllUsersNames))) {
            /*console.log(item);*/
                options.data[item] = null;
            }

        let onSubmit = function (event) {
            event.preventDefault();

            let roomNameInput = document.querySelector("#roomName");
            newRoomVM.roomName = roomNameInput.value;

            fetch("/Chat/CreateRoom", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(newRoomVM)
            })
                .then(response => response.text())
                .then(createdRoomName => {
                    window.location.href = `/Chat/RoomCreated?roomName=${createdRoomName}`
                })
                .catch(err => console.log(err))
            }


            document.addEventListener('DOMContentLoaded', function () {
                var elems = document.querySelectorAll('.autocomplete');
                var instances = M.Autocomplete.init(elems, options);
            });
    </script>
}
