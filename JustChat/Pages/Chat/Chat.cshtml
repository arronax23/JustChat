@page
@model JustChat.Pages.Chat.ChatModel
@{
}

<div class="chat-page">
    <div class="chat-container">
        <h3 class="center-align">@Model.ChatVM.RoomName</h3>
        <div class="chat-content">
            @foreach (var message in Model.ChatVM?.Messages)
            {
                <div>
                    <span>@message.Author.UserName: </span>
                    <span>@message.Content </span>
                    <span class="time-span">@message.TimeStamp.ToString("dd.MM.yyyy, HH:mm:ss")</span>
                </div>
            }
        </div>

        <div>
            <form method="post" onsubmit="onSubmit(event)">
                <div>
                    <input name="content" onchange="conentChange(event)" />
                </div>
                <div>
                    <button id="sendButton" class="btn waves-effect waves-light" type="submit">
                        Submit@*<i class="material-icons right">send</i>*@
                    </button>
                </div>
                @*<input name="authorId" value="@Model.ChatVM.AuthorId" class="hide" />
                <input name="roomdId" value="@Model.ChatVM.RoomId" class="hide" />
                <input name="roomName" value="@Model.ChatVM.RoomName" class="hide" />
                <input name="userName" value="@Model.ChatVM.UserName" class="hide" />*@
            </form>
        </div>
    </div>
    <div class="users-container center-align">
        <h6 class="">Users</h6>
        @foreach(var userName in Model.ChatVM.UserNames)
        {
            <div class="user-bar offline-user @userName">
                <i class="material-icons prefix">face</i>
                @userName
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (message) {
        let chatContent = document.querySelector(".chat-content");
        let div = document.createElement("div");
        let time = new Date(message.timeStamp).toLocaleString();
        div.innerHTML = `<span>${message.userName}: </span><span>${message.content} </span><span class="time-span">${time}</span>`;
        chatContent.appendChild(div);

    });

    connection.on("JoinedRoom", function (activeUsers) {
        console.log(activeUsers);
        for (let activeUser of activeUsers) {
            document.querySelector(`.${activeUser}`).classList.remove("offline-user");
        }
     
    });

    connection.on("LeftRoom", function (userWhoLeft) {
        document.querySelector(`.${userWhoLeft}`).classList.add("offline-user");
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
        connection.invoke('JoinRoom', '@Model.ChatVM.RoomName', '@Model.ChatVM.CurrentUserName');
    }).catch(function (err) {
        return console.log(err.toString());
    });

    window.addEventListener('unload', function () {
        connection.invoke('LeaveRoom', '@Model.ChatVM.RoomName','@Model.ChatVM.CurrentUserName');
    });

        let onSubmit = function (event) {
            event.preventDefault();
            console.log(event.target)
            connection.invoke('SendRoomMessage',
                content,
                userName,
                authorId,
                roomId,
                roomName,
            );
        }

        let content = '';
        let userName = '@Model.ChatVM.CurrentUserName';
        let authorId = '@Model.ChatVM.AuthorId';
        let roomId = parseInt('@Model.ChatVM.RoomId');
        let roomName = '@Model.ChatVM.RoomName';

        let conentChange = function (event) {
            content = event.target.value;
        }
    </script>
}