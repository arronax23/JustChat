@page
@model JustChat.Pages.Chat.ChatModel
@{
}

<div class="chat-page">
    <h3 class="chat-header">@Model.ChatVM.RoomName</h3>
    <div class="chat-container">
        <div class="chat-content">
            @foreach (var message in Model.ChatVM?.Messages)
            {
                <div class="message">
                    <span>@message.Author.UserName: </span>
                    <span class="message-content">&nbsp;@message.Content </span>
                    <span class="time-span">@message.TimeStamp.ToString("dd.MM.yyyy, HH:mm:ss")</span>
                </div>
            }
        </div>
    </div>
    <div class="chat-form">
        <div class="form">
            <form onsubmit="onSubmit(event)">
                <div>
                    <input id="content-input" name="content" onchange="conentChange(event)" />
                </div>
                <div>
                    <button id="sendButton" class="btn waves-effect waves-light" type="submit" disabled>
                        Submit<i class="material-icons right">send</i>
                    </button>
                    <button type="button" class="waves-effect pink darken-4 btn" id="emoji-btn">Pick emoji</button>
                </div>
            </form>
        </div>
    </div>
    <div class="users-container center-align">
        <div class="room-users">
            <h6 class="">Users</h6>
            @foreach (var userName in Model.ChatVM.UserNamesInvitedToRoom)
            {
                <div class="user-bar offline-user @userName">
                    <i class="material-icons prefix">face</i>
                    @userName
                </div>
            }
        </div>
    </div>
    <div class="invite-users">
        <div class="row">
            <div class="input-field">
                <i class="material-icons prefix">face</i>
                <input type="text" id="autocomplete-input" class="autocomplete">
                <label for="autocomplete-input">Add more users</label>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        connection.on("ReceiveMessage", function (message) {
            let chatContent = document.querySelector(".chat-content");
            let div = document.createElement("div");
            let time = new Date(message.timeStamp).toLocaleString();
            div.innerHTML = `<span>${message.userName}: </span><span class="message-content">&nbsp;${message.content} </span><span class="time-span">${time}</span>`;
            div.classList.add("message");
            chatContent.appendChild(div);
            chatContent.scrollTop = chatContent.scrollHeight;

        });

        connection.on("JoinedRoom", function (activeUsers) {
            console.log(activeUsers);
            for (let activeUser of activeUsers) {
                document.querySelector(`.${activeUser}`).classList.remove("offline-user");
            }

        });

        connection.on("LeftRoom", function (userWhoLeft) {
            document.querySelector(`.${userWhoLeft}`).classList.add("offline-user");
        });

        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
            connection.invoke('JoinRoom', '@Model.ChatVM.RoomName', '@Model.ChatVM.CurrentUserName');
        }).catch(function (err) {
            return console.log(err.toString());
        });

        window.addEventListener('beforeunload', function () {
            connection.invoke('LeaveRoom', '@Model.ChatVM.RoomName','@Model.ChatVM.CurrentUserName');
        });

        let onSubmit = function (event) {
            event.preventDefault();
/*            console.log(event.target);*/
            document.querySelector("#content-input").value = '';
            connection.invoke('SendRoomMessage',
                content,
                userName,
                authorId,
                roomId,
                roomName,
            );

            content = '';
        }

        let content = '';
        let userName = '@Model.ChatVM.CurrentUserName';
        let authorId = '@Model.ChatVM.AuthorId';
        let roomId = parseInt('@Model.ChatVM.RoomId');
        let roomName = '@Model.ChatVM.RoomName';

        let conentChange = function (event) {
            console.log(event.target.value);
            content = event.target.value;
        }


        /******************************************************/
        let options = {
            data: {
            },
            onAutocomplete: function (invitedUser) {
                let userBar = document.createElement("div");
                userBar.className = `user-bar offline-user ${invitedUser}`;
                userBar.innerHTML = `<i class="material-icons prefix">face</i> ${invitedUser}`;
                document.querySelector(".room-users").appendChild(userBar);

                fetch("/Chat/AddUserToRoom", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        RoomId: @Model.ChatVM.RoomId,
                        UserName: invitedUser
                    })
                })
                .then(resp => {
                    if (resp.ok) {
                        console.log("added user to room successfully");
                    }
                })
                .catch(err => console.log(err));

                delete options.data[invitedUser];
            }
        };

        for (let item of @Html.Raw(@Json.Serialize(Model.ChatVM.UsersNamesPossibleToInvite))) {
            console.log(item);
            options.data[item] = null;
        }

        let emojiPicked = function (emoji) {
            let contentInput = document.querySelector('#content-input');
            contentInput.value += emoji;
            content += emoji;
        }

        let instance = new emojiButtonList("emoji-btn", {
            dropDownXAlign: "left",
            textBoxID: "content-input",
            onEmojiClick: emojiPicked,
            yAlignMargin: 10,
            xAlignMargin: 10
        });
    </script>
    <script src="~/js/autocompleteInitialization.js"></script>
    <script>autocompleteInitialization(options)</script>
}